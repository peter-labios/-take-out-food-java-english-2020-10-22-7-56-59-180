import javafx.beans.binding.BooleanBinding;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        List<Item> foodMenuList = itemRepository.findAll();
        List<String[]> orderDetailsList = new ArrayList<>();

        for (String foodOrder : inputs) {
            String foodName = null;
            String foodPrice = null;
            int foodQuantity = 0;
            String[] foodItem = foodOrder.split(" ");

            for (Item food : foodMenuList) {
                if (foodItem[0].equals(food.getId())) {
                    foodName = food.getName();
                    foodQuantity = Integer.parseInt(foodItem[2]);
                    foodPrice = String.valueOf((int)food.getPrice());
                }
            }
            orderDetailsList.add(new String[]{foodItem[0], foodName, String.valueOf(foodQuantity), String.valueOf(foodPrice)});
        }

        return buildOrder(orderDetailsList, checkForPromotions(orderDetailsList));
    }
    public List<String> checkForPromotions(List<String[]> orderDetailsList) {
        List<SalesPromotion> salesPromotionsList = salesPromotionRepository.findAll();
        List<String> promotionDetailsList = new ArrayList<>();
        List<String> promotionDetailsList2 = new ArrayList<>();
        boolean isPromotionActive = false;
        int total = 0, promotionsTotal = 0, promotionsTotal2 = 0;
        int savingsTotal;

        for (String[] orderDetails : orderDetailsList) {
            for (int x = 0; x < salesPromotionsList.get(1).getRelatedItems().size(); x++) {
                if (orderDetails[0].equals(salesPromotionsList.get(1).getRelatedItems().get(x))) {
                    if (!isPromotionActive) {
                        promotionDetailsList.add(salesPromotionsList.get(1).getDisplayName());
                        isPromotionActive = true;
                    }
                    promotionDetailsList.add(orderDetails[1].toLowerCase());
                    promotionsTotal = promotionsTotal + (Integer.parseInt(orderDetails[2])*(int)Double.parseDouble(orderDetails[3])/2);
                }
            }
            total = total + (Integer.parseInt(orderDetails[2]) * (int)Double.parseDouble(orderDetails[3]));
        }

        if(total>=30) {
            promotionDetailsList2.add(salesPromotionsList.get(0).getDisplayName());
            isPromotionActive = true;
            promotionsTotal2 = 6;
        }

        if(promotionsTotal > promotionsTotal2){
            savingsTotal = total - promotionsTotal;
            promotionDetailsList.add(String.valueOf(isPromotionActive));
            promotionDetailsList.add(String.valueOf(savingsTotal));
            promotionDetailsList.add(String.valueOf(total));
            return promotionDetailsList;
        } else {
            savingsTotal = total - promotionsTotal2;
            promotionDetailsList2.add(String.valueOf(isPromotionActive));
            promotionDetailsList2.add(String.valueOf(savingsTotal));
            promotionDetailsList2.add(String.valueOf(total));
            return promotionDetailsList2;
        }
    }
    public String buildOrder(List<String[]> orderDetails, List<String> promotionDetailsList) {
        String header = "============= Order details =============\n";
        String footer = "===================================";
        String divider = "-----------------------------------\n";
        StringBuilder sb = new StringBuilder();

        int total = Integer.parseInt(promotionDetailsList.get(promotionDetailsList.size()-1));
        int savings = Integer.parseInt(promotionDetailsList.get(promotionDetailsList.size()-2));

        sb.append(header);
        for (String[] order : orderDetails) {
            sb.append(order[1] + " x " + order[2] + " = " + (Integer.parseInt(order[3]) * Integer.parseInt(order[2]))  + " yuan\n");
        }
        sb.append(divider);
        if (Boolean.parseBoolean(promotionDetailsList.get(promotionDetailsList.size()-3))) {
            sb.append("Promotion used:\n");
            if(promotionDetailsList.size()>=5) {
                sb.append(promotionDetailsList.get(0) + " (");
            }
            if(promotionDetailsList.size()==5){
                sb.append(promotionDetailsList.get(1) + "), ");
            } else if(promotionDetailsList.size()==6){
                sb.append(promotionDetailsList.get(1) + " and " + promotionDetailsList.get(2) + ")");
            } else {
                sb.append(promotionDetailsList.get(0));
            }
            sb.append(", saving " + (total - savings) + " yuan\n");
            sb.append(divider);
        }
        sb.append("Total: " + savings + " yuan\n");
        sb.append(footer);

        return sb.toString();
    }
}
